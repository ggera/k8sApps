pipeline {
    agent {
        kubernetes {
            defaultContainer 'jnlp'
            label 'paga-monitoring-lib-builder'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  namespace: qa2-paga
  labels:
    some-label: paga-monitoring-lib-builder
spec:
  containers:
  - name: busybox
    image: busybox:1.31
    command:
    - cat
    tty: true
  - name: paga-azure-cloudtools
    image: pagangcr.azurecr.io/paga/paga-azure-cloudtools:1.0
    command:
    - cat
    tty: true
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug-v0.14.0
    command:
    - /busybox/cat
    tty: true
    resources:
      requests:
        cpu: "500m"
        memory: "2048Mi"
        ephemeral-storage: "5Gi"
      limits:
        cpu: "1000m"
        memory: "4096Mi"
        ephemeral-storage: "10Gi"
  - name: paga-monitoring-lib-builder
    image: pagangcr.azurecr.io/paga/paga-builder:1.0
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /dev/shm
      name: dshm   
    env:
    - name: ENVIRONMENT
      value: "k8s"
    - name: TZ
      value: "Africa/Lagos"
    - name: PAGA_ENC_KEY
      valueFrom:
        secretKeyRef:
          key: pagaEncryptionKey
          name: paga-services-secrets
    - name: PAGA_ENC_ALGORITHM
      value: "PBEWithMD5AndTripleDES"
    - name: PAGA_ENC_ITERATIONS
      value: "1000"
    resources:
      requests:
        cpu: "500m"
        memory: "1024Mi"
        ephemeral-storage: "2Gi"
      limits:
        cpu: "4"
        memory: "16384Mi"
        ephemeral-storage: "4Gi"  
  imagePullSecrets:
  - name: paga-services-cr-secret
  volumes:
  - name: dshm
    emptyDir:
      medium: Memory
  - name: paga-services-share-volume
    azureFile:
      secretName: paga-services-sa-secret
      shareName: "qa2"
      readOnly: false      
"""
        }
    }

    environment {
        AZURE_APP_ID = "50b37c7b-14b8-4257-adfb-f2c41f514368"
        AZURE_TENENT_ID = "e9b31dbb-324c-4d90-86a2-0c542a69203d"
        AZURE_APP_SECRET = "9sTH2QU+8AptTLoJJAg4Obv457w9MsNp"
        AZURE_ACR_HOST = "pagangcr.azurecr.io"
        AZURE_ACR_USERNAME = "unset"
        AZURE_ACR_PASSWORD = "unset"
        AZURE_SUBSCRIPTION_ID = "unset"
        PAGA_BUILDER_VAULT_NAME = "paga-ng-qa-builder-vault"
        PAGA_GIT_USER_PASSWORD = "unset"
        PAGA_CENTRAL_USER_PASSWORD = "lA9GkDzNnT/T7AXOAcGqsw=="
        BUILDER_SMTP_HOST = "smtp.gmail.com"
        BUILDER_GMAIL_USERNAME = "buildbot@apposit.com"
        BUILDER_GMAIL_SMTP_PASSWORD = "unset"
        BUILDER_FROM_ADDRESS="From: buildbot<buildbot@apposit.com>"
        HOST_UP_TIMEOUT = "20" //minutes
        NOTIFICATION_GROUP = "devteam@pagatech.com"
        GIT_HTTP_MAX_REQUEST_BUFFER="100M"
    }

    stages {
        stage("Initialization"){
            steps{

                container('paga-monitoring-lib-builder') {


                    sh "apk update"
                    sh "apk add tzdata rsync"
                    sh "rm /etc/localtime"
                    sh "ln -s /usr/share/zoneinfo/Africa/Lagos /etc/localtime"
                    sh "mkdir -p /home/jenkins/agent/gradle/.gradle"
                    sh "rsync -a --delete /home/jenkins/agent/gradle/.gradle/ /home/gradle/.gradle/"


                    script {

                        sh "cd jenkins/tools/decrypt && cp Decrypt.bak Decrypt.class"
                        AZURE_APP_SECRET = sh(returnStdout: true, script: "cd jenkins/tools/decrypt && java -cp jasypt-1.9.2.jar:. Decrypt ${AZURE_APP_SECRET}")

                        PAGA_CENTRAL_USER_PASSWORD= sh(returnStdout: true, script: "cd jenkins/tools/decrypt && java -cp jasypt-1.9.2.jar:. Decrypt ${PAGA_CENTRAL_USER_PASSWORD}")
                    }
                }

                container("paga-azure-cloudtools") {

                    sh "echo 'Fetching credentials from azure ...'"

                    sh "#!/bin/sh -e\naz login --service-principal --username ${AZURE_APP_ID} --tenant ${AZURE_TENENT_ID} --password ${AZURE_APP_SECRET}"

                    script {
                        def v = sh(returnStdout: true, script: "az account show --query id -o tsv")
                        AZURE_SUBSCRIPTION_ID = v.replace("\n","")

                        v = sh(returnStdout: true, script: "az keyvault secret show --subscription ${AZURE_SUBSCRIPTION_ID} --vault-name ${PAGA_BUILDER_VAULT_NAME} --name jenkins-git-user-password --query value -o tsv")
                        PAGA_GIT_USER_PASSWORD = v.replace("\n","")

                        v = sh(returnStdout: true, script: "az keyvault secret show --subscription ${AZURE_SUBSCRIPTION_ID} --vault-name ${PAGA_BUILDER_VAULT_NAME} --name buildbot-smtp-password --query value -o tsv")
                        v = v.replace('$','''\\$''')
                        BUILDER_GMAIL_SMTP_PASSWORD = v.replace("\n","")
                    }
                }
            }
        }

        stage('Build paga duplicate prevent lib') {

            steps {
                container('busybox') {
                    sh "pwd"
                }
                container('paga-monitoring-lib-builder'){
                    sh "apk update && apk add git"
                    sh "gradle --no-daemon clean artifactoryPublish -Partifactory_user=deployer -Partifactory_password=${PAGA_CENTRAL_USER_PASSWORD}"
                }
            }
        }

    }

    post {

        always {
            container('paga-monitoring-lib-builder')
                    {
                        script {

                            APP_CURRENT_VERSION = getVersion('version.properties')
                            echo "paga duplicate prevent lib version: ${APP_CURRENT_VERSION}"

                            // test
                            EMAIL_BODY = "Hi Team,\n" +
                                    "\n" +
                                    "New build version ${APP_CURRENT_VERSION} of paga-monitoring-lib has been pushed to https://maven.mypaga.com/ servers.\n" +
                                    "\n" +
                                    "Regards"
                            EMAIL_SUBJECT = "New build version ${APP_CURRENT_VERSION} of paga-monitoring-lib deployed to pagaCentral"
                         }

                        //send results email
                        sh """#!/bin/sh -e
                        echo -e "root=${BUILDER_GMAIL_USERNAME}\nmailhub=${BUILDER_SMTP_HOST}:465\nFromLineOverride=YES" > /etc/ssmtp/ssmtp.conf
                        """
                        sh """#!/bin/sh -e
                        echo -e "AuthUser=${BUILDER_GMAIL_USERNAME}\nAuthPass=${BUILDER_GMAIL_SMTP_PASSWORD}\nUseTLS=YES" >> /etc/ssmtp/ssmtp.conf
                        """

                         sh """#!/bin/sh -e

                         ATTACHMENTS=""
            
                         echo -e "${EMAIL_BODY}" | mail -s "${EMAIL_SUBJECT}" \${ATTACHMENTS} -a "${BUILDER_FROM_ADDRESS}" ${NOTIFICATION_GROUP}   
            
                         """

                        sh "echo 'End of publish task'"
                    }
        }
    }

}

def getVersion(String fname)
{
    def content = readFile fname

    def version = ""
    def parts = content.split("\n")
    for(p in parts)
    {
        if(p.startsWith("version="))
        {
            version = p.replace("version=","")
            break
        }
    }

    return version
}

